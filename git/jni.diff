commit 90bae5a2e9e2ed162ebed3c6ae056918aa241962
Author: Your Name <you@example.com>
Date:   Tue Aug 29 15:10:57 2017 +0800

    add JNI layer code
    compile:mmm ./frameworks/base/services/jni/

diff --git a/frameworks/base/services/jni/Android.mk b/frameworks/base/services/jni/Android.mk
index 6fa5dfa..5381322 100755
--- a/frameworks/base/services/jni/Android.mk
+++ b/frameworks/base/services/jni/Android.mk
@@ -15,6 +15,7 @@ LOCAL_SRC_FILES:= \
     com_android_server_VibratorService.cpp \
     com_android_server_location_GpsLocationProvider.cpp \
     com_android_server_connectivity_Vpn.cpp \
+	com_android_server_led_demo_service.cpp \
     onload.cpp
 
 LOCAL_C_INCLUDES += \
diff --git a/frameworks/base/services/jni/com_android_server_led_demo_service.cpp b/frameworks/base/services/jni/com_android_server_led_demo_service.cpp
new file mode 100755
index 0000000..39e4af5
--- /dev/null
+++ b/frameworks/base/services/jni/com_android_server_led_demo_service.cpp
@@ -0,0 +1,94 @@
+#define LOG_TAG  "LED_DEMO_Service_JNI"
+
+#include "jni.h"
+#include "JNIHelp.h"
+#include "android_runtime/AndroidRuntime.h"
+
+#include <utils/misc.h>
+#include <utils/Log.h>
+#include <hardware/hardware.h>
+#include <hardware/led_demo_hal.h>
+
+#include <stdio.h>
+
+
+namespace android
+{
+	static void led_demo_setOFF(JNIEnv *env, jobject clazz, jint ptr, jint value)
+	{
+		led_demo_device_t *device = (led_demo_device_t *)ptr;
+		if(!device)
+		{
+			LOGE("Device led demo is not open.");
+			return ;
+		}
+
+		int val = value;
+
+		LOGI("Set value %d to device led demo.", val);
+		device->set_off(device, value);
+	}
+
+	static void led_demo_setON(JNIEnv *env, jobject clazz, jint ptr, jint value)
+	{
+		led_demo_device_t *device = (led_demo_device_t *)ptr;
+		if(!device)
+		{
+			LOGE("Device led demo is not open.");
+			return ;
+		}
+
+		int val = value;
+
+		LOGI("Set value %d to device led demo.", val);
+		device->set_on(device, value);
+	}
+	
+
+	static inline int led_demo_device_open(const hw_module_t *module, struct led_demo_device_t **device)
+	{
+		return module->methods->open(module, LED_DEMO_HARDWARE_DEVICE_ID, (struct hw_device_t **)device);	
+	}
+
+	static jint led_demo_init(JNIEnv *env, jclass clazz)
+	{
+		struct led_demo_module_t *module;
+		struct led_demo_device_t *device;
+
+
+		LOGI("Initializing HAL stub led ......");
+
+		if(hw_get_module(LED_DEMO_HARDWARE_MODULE_ID, (const struct hw_module_t **)&module) == 0)
+		{
+			LOGE("Device led demo found.");
+
+			if(led_demo_device_open(&(module->common), &device))
+			{
+				LOGI("Device led demo is open.");
+				return (jint)device;
+			}
+
+			LOGE("Failed to open device led.");
+
+			return 0;
+		}
+
+		LOGE("Failed to get HAL stub led demo.");
+		return 0;
+	}
+
+	static const JNINativeMethod  method_table[] =
+	{
+		{"init_native", "()I", (void *)led_demo_init},
+		{"set_OFF_native", "(II)V", (void *)led_demo_setOFF},
+		{"set_ON_native", "(II)V", (void *)led_demo_setON},
+	};
+
+	int register_android_server_led_demo_service(JNIEnv *env)
+	{
+		return jniRegisterNativeMethods(env, "com/android/server/Led_demo_Service", 
+			method_table, NELEM(method_table));
+	}
+
+};
+
diff --git a/frameworks/base/services/jni/onload.cpp b/frameworks/base/services/jni/onload.cpp
index 4178039..9fd52dd 100755
--- a/frameworks/base/services/jni/onload.cpp
+++ b/frameworks/base/services/jni/onload.cpp
@@ -33,6 +33,7 @@ int register_android_server_VibratorService(JNIEnv* env);
 int register_android_server_SystemServer(JNIEnv* env);
 int register_android_server_location_GpsLocationProvider(JNIEnv* env);
 int register_android_server_connectivity_Vpn(JNIEnv* env);
+int register_android_server_led_demo_service(JNIEnv *env);
 };
 
 using namespace android;
@@ -61,6 +62,7 @@ extern "C" jint JNI_OnLoad(JavaVM* vm, void* reserved)
     register_android_server_SystemServer(env);
     register_android_server_location_GpsLocationProvider(env);
     register_android_server_connectivity_Vpn(env);
+	register_android_server_led_demo_service(env);
 
     return JNI_VERSION_1_4;
 }
